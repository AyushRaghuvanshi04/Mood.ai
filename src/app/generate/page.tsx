"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { useSession } from "next-auth/react";
import AudioPlayer from "@/components/AudioPlayer";

type Playlist = {
	id: string;
	name: string;
	description: string;
	public: boolean;
	imageUrl: string;
	externalUrl: string;
	tracks: { id: string; title: string; artist: string; previewUrl: string | undefined; spotifyId?: string | null }[];
	verificationStats?: {
		totalGenerated: number;
		verifiedOnSpotify: number;
		unverified: number;
	};
};

export default function GeneratePage() {
	const { data: session, status } = useSession();
	const [prompt, setPrompt] = useState("");
	const [title, setTitle] = useState("My SonifyAI Playlist");
	const [description, setDescription] = useState("Generated by SonifyAI");
	const [numSongs, setNumSongs] = useState(15);
	const [isPublic, setIsPublic] = useState(true);
	const [loading, setLoading] = useState(false);
	const [creating, setCreating] = useState(false);
	const [error, setError] = useState<string | null>(null);
	const [playlist, setPlaylist] = useState<Playlist | null>(null);
	const [createdLink, setCreatedLink] = useState<string | null>(null);
	const [isRefreshing, setIsRefreshing] = useState(false);
	const [showSuccessAnimation, setShowSuccessAnimation] = useState(false);
	// Use session directly instead of separate isGuestMode state
	const isGuestMode = !session || status !== "authenticated";
	
	// New state for genre selection
	const [selectedLanguage, setSelectedLanguage] = useState("");
	const [selectedGenre, setSelectedGenre] = useState("");
	
	// New state for playlist templates
	const [selectedTemplate, setSelectedTemplate] = useState("");

	// Language/Region options
	const languages = [
		{ value: "hollywood", label: "Hollywood (English)", flag: "🇺🇸" },
		{ value: "bollywood", label: "Bollywood (Hindi)", flag: "🇮🇳" },
		{ value: "korean", label: "K-Pop (Korean)", flag: "🇰🇷" },
		{ value: "japanese", label: "J-Pop (Japanese)", flag: "🇯🇵" },
		{ value: "spanish", label: "Latin (Spanish)", flag: "🇪🇸" },
		{ value: "french", label: "French", flag: "🇫🇷" },
		{ value: "german", label: "German", flag: "🇩🇪" },
		{ value: "any", label: "Any Language", flag: "🌍" }
	];

	// Playlist templates for quick mood selection
	const playlistTemplates = [
		{ 
			id: "workout", 
			name: "💪 Workout Energy", 
			description: "High-energy songs for gym and fitness",
			mood: "high energy workout gym fitness motivation pump up",
			genre: "Hip-Hop",
			language: "hollywood",
			color: "from-red-500 to-orange-500"
		},
		{ 
			id: "study", 
			name: "📚 Study Focus", 
			description: "Calm instrumental music for concentration",
			mood: "calm instrumental study focus concentration ambient peaceful",
			genre: "Ambient",
			language: "hollywood",
			color: "from-blue-500 to-indigo-500"
		},
		{ 
			id: "party", 
			name: "🎉 Party Vibes", 
			description: "Upbeat dance music for celebrations",
			mood: "upbeat party dance celebration fun energetic club",
			genre: "Electronic",
			language: "hollywood",
			color: "from-purple-500 to-pink-500"
		},
		{ 
			id: "chill", 
			name: "😌 Chill Out", 
			description: "Relaxing music for unwinding",
			mood: "chill relaxing calm peaceful unwind mellow",
			genre: "Indie",
			language: "hollywood",
			color: "from-green-500 to-teal-500"
		},
		{ 
			id: "romantic", 
			name: "💕 Romantic", 
			description: "Love songs for special moments",
			mood: "romantic love songs emotional heartfelt intimate",
			genre: "R&B",
			language: "hollywood",
			color: "from-pink-500 to-rose-500"
		},
		{ 
			id: "sad", 
			name: "😢 Sad Songs", 
			description: "Melancholic music for emotional moments",
			mood: "sad melancholic emotional heartbreak introspective",
			genre: "Indie",
			language: "hollywood",
			color: "from-gray-500 to-slate-500"
		},
		{ 
			id: "bollywood-romantic", 
			name: "🇮🇳 Bollywood Romance", 
			description: "Beautiful Hindi love songs",
			mood: "romantic bollywood hindi love songs emotional",
			genre: "Bollywood Pop",
			language: "bollywood",
			color: "from-yellow-500 to-orange-500"
		},
		{ 
			id: "bollywood-dance", 
			name: "🇮🇳 Bollywood Dance", 
			description: "Energetic Hindi party songs",
			mood: "bollywood dance party energetic hindi celebration",
			genre: "Dance",
			language: "bollywood",
			color: "from-orange-500 to-red-500"
		}
	];

	// Genre mapping based on language/region
	const genreMapping = {
		hollywood: [
			"Pop", "Rock", "Hip-Hop", "R&B", "Electronic", "Jazz", "Classical", "Country", 
			"Indie", "Alternative", "Folk", "Blues", "Reggae", "Funk", "Soul", "Punk",
			"Metal", "Gospel", "Ambient", "House", "Techno", "Trap", "Drill", "Afrobeats"
		],
		bollywood: [
			"Bollywood Pop", "Romantic", "Dance", "Item Song", "Classical Fusion", "Sufi", 
			"Ghazal", "Qawwali", "Folk Fusion", "Indie Hindi", "Retro Bollywood", "Modern Bollywood",
			"Bhangra", "Punjabi", "Marathi", "Tamil", "Telugu", "Bengali", "Gujarati", "Rajasthani"
		],
		korean: [
			"K-Pop", "K-Hip-Hop", "K-R&B", "K-Rock", "K-Indie", "K-Ballad", "K-Electronic",
			"K-Folk", "K-Jazz", "K-Classical", "K-Trap", "K-Drill", "K-OST", "K-Trot"
		],
		japanese: [
			"J-Pop", "J-Rock", "J-Hip-Hop", "J-R&B", "J-Electronic", "J-Indie", "J-Ballad",
			"J-Folk", "J-Jazz", "J-Classical", "J-OST", "J-Idol", "J-Visual Kei", "J-Anime"
		],
		spanish: [
			"Reggaeton", "Salsa", "Bachata", "Merengue", "Cumbia", "Latin Pop", "Latin Rock",
			"Flamenco", "Latin Jazz", "Latin Hip-Hop", "Trap Latino", "Latin R&B", "Mariachi",
			"Latin Folk", "Latin Electronic", "Latin Indie"
		],
		french: [
			"Chanson", "French Pop", "French Rock", "French Hip-Hop", "French Electronic",
			"French Jazz", "French Indie", "French Folk", "French R&B", "French Classical",
			"French House", "French Techno", "French Ballad"
		],
		german: [
			"German Pop", "German Rock", "German Hip-Hop", "German Electronic", "German Indie",
			"German Folk", "German Jazz", "German Classical", "German House", "German Techno",
			"German Ballad", "German R&B", "Schlager"
		],
		any: [
			"Pop", "Rock", "Hip-Hop", "R&B", "Electronic", "Jazz", "Classical", "Country", 
			"Indie", "Alternative", "Folk", "Blues", "Reggae", "Funk", "Soul", "Punk",
			"Metal", "Gospel", "Ambient", "House", "Techno", "Trap", "Drill", "Afrobeats",
			"Bollywood", "K-Pop", "J-Pop", "Latin", "Chanson", "German Pop"
		]
	};

	// State for current genres based on selected language
	const [currentGenres, setCurrentGenres] = useState(genreMapping.any);

	// Update current genres when language changes
	useEffect(() => {
		if (selectedLanguage) {
			const newGenres = genreMapping[selectedLanguage as keyof typeof genreMapping] || genreMapping.any;
			setCurrentGenres(newGenres);
		} else {
			setCurrentGenres(genreMapping.any);
		}
	}, [selectedLanguage]);

	// Handle language change and reset genre selection
	const handleLanguageChange = (newLanguage: string) => {
		setSelectedLanguage(newLanguage);
		setSelectedGenre(""); // Reset genre selection when language changes
	};

	// Handle template selection
	const handleTemplateSelect = (template: typeof playlistTemplates[0]) => {
		setSelectedTemplate(template.id);
		setPrompt(template.mood);
		setTitle(template.name);
		setDescription(template.description);
		// Set language first, then genre to ensure proper dropdown update
		setSelectedLanguage(template.language);
		// Update current genres based on template language
		const availableGenres = genreMapping[template.language as keyof typeof genreMapping] || genreMapping.any;
		setCurrentGenres(availableGenres);
		// Find the exact genre match in the genre mapping
		const matchingGenre = availableGenres.find(genre => 
			genre.toLowerCase() === template.genre.toLowerCase() ||
			genre.toLowerCase().includes(template.genre.toLowerCase()) ||
			template.genre.toLowerCase().includes(genre.toLowerCase())
		) || template.genre;
		
		setSelectedGenre(matchingGenre);
	};

	// Clear template selection
	const clearTemplate = () => {
		setSelectedTemplate("");
		setPrompt("");
		setTitle("My SonifyAI Playlist");
		setDescription("Generated by SonifyAI");
		setSelectedLanguage("");
		setSelectedGenre("");
		setCurrentGenres(genreMapping.any);
	};



	async function handleGenerate(e: React.FormEvent) {
		e.preventDefault();
		setLoading(true);
		setError(null);
		setPlaylist(null);
		setCreatedLink(null);
		
		try {
			const res = await fetch("/api/generate", {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({ 
					prompt, 
					title, 
					description, 
					numSongs, 
					isPublic,
					language: selectedLanguage,
					genre: selectedGenre
				}),
			});
			
			if (!res.ok) {
				const errorData = await res.json().catch(() => ({}));
				throw new Error(errorData.error || `Request failed with status ${res.status}`);
			}
			
			const data = (await res.json()) as { success: boolean; playlist: Playlist; note?: string };
			
			if (!data.success) {
				throw new Error("Failed to generate playlist");
			}
			
			setPlaylist(data.playlist);
			
			// Show note if provided (e.g., when using fallback)
			if (data.note) {
				console.log("Note:", data.note);
			}
		} catch (err: any) {
			console.error("Generate error:", err);
			setError(err?.message || "Something went wrong while generating your playlist");
		} finally {
			setLoading(false);
		}
	}

	async function handleCreateOnSpotify() {
		if (!playlist || isGuestMode) return;
		setCreating(true);
		setError(null);
		setCreatedLink(null);
		try {
			const res = await fetch("/api/spotify/create-playlist", {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({
					title,
					description,
					isPublic,
					tracks: playlist.tracks.map(t => ({ title: t.title, artist: t.artist })),
				}),
			});
			
			if (!res.ok) {
				const errorData = await res.json().catch(() => ({}));
				if (res.status === 401) {
					throw new Error("Please sign in to Spotify to create playlists");
				}
				throw new Error(errorData.error || `Spotify request failed with status ${res.status}`);
			}
			
			const data = await res.json();
			if (!data.success) {
				throw new Error(data.error || "Failed to create playlist on Spotify");
			}
			
			setCreatedLink(data.externalUrl || null);
		} catch (err: any) {
			console.error("Spotify creation error:", err);
			setError(err?.message || "Failed to create playlist on Spotify");
		} finally {
			setCreating(false);
		}
	}

	// Refresh function to generate new suggestions with same parameters
	async function handleRefresh() {
		if (!prompt.trim()) {
			setError("Please enter a mood prompt first");
			return;
		}
		
		setIsRefreshing(true);
		setError(null);
		
		try {
			const res = await fetch("/api/generate", {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({ 
					prompt, 
					title, 
					description, 
					numSongs, 
					isPublic,
					language: selectedLanguage,
					genre: selectedGenre
				}),
			});
			
			if (!res.ok) {
				const errorData = await res.json().catch(() => ({}));
				throw new Error(errorData.error || `Request failed with status ${res.status}`);
			}
			
			const data = (await res.json()) as { success: boolean; playlist: Playlist; note?: string };
			
			if (!data.success) {
				throw new Error("Failed to generate playlist");
			}
			
			setPlaylist(data.playlist);
			setCreatedLink(null); // Reset created link for new playlist
			
			// Show note if provided (e.g., when using fallback)
			if (data.note) {
				console.log("Note:", data.note);
			}
		} catch (err: any) {
			console.error("Refresh error:", err);
			setError(err?.message || "Something went wrong while refreshing your playlist");
		} finally {
			setIsRefreshing(false);
		}
	}

	// Handle adding song to playlist (placeholder for now)
	const handleAddToPlaylist = (songTitle: string, artist: string) => {
		console.log(`Adding "${songTitle}" by ${artist} to playlist`);
		// TODO: Implement actual playlist addition logic
		// For now, just show a success message
		setError(null);
		setTimeout(() => {
			setShowSuccessAnimation(true);
			setTimeout(() => setShowSuccessAnimation(false), 3000);
		}, 100);
	};

	// Handle sharing song
	const handleShareSong = async (songTitle: string, artist: string, spotifyId: string) => {
		const shareUrl = `https://open.spotify.com/track/${spotifyId}`;
		const shareText = `Check out "${songTitle}" by ${artist} on Spotify!`;
		
		if (navigator.share) {
			try {
				await navigator.share({
					title: shareText,
					url: shareUrl,
				});
			} catch (error) {
				// Fall back to clipboard
				await navigator.clipboard.writeText(`${shareText} ${shareUrl}`);
				setError(null);
				setShowSuccessAnimation(true);
				setTimeout(() => setShowSuccessAnimation(false), 2000);
			}
		} else {
			// Fall back to clipboard
			await navigator.clipboard.writeText(`${shareText} ${shareUrl}`);
			setError(null);
			setShowSuccessAnimation(true);
			setTimeout(() => setShowSuccessAnimation(false), 2000);
		}
	};


	return (
		<div className="relative max-w-full overflow-hidden">
			{/* Background */}
			<div className="absolute inset-0 -z-10">
				<div className="absolute inset-0 bg-gradient-to-b from-purple-900/40 via-black to-black" />
				<div className="pointer-events-none absolute -top-40 -left-40 h-[32rem] w-[32rem] rounded-full bg-fuchsia-500/20 blur-3xl" />
				<div className="pointer-events-none absolute -bottom-40 -right-40 h-[32rem] w-[32rem] rounded-full bg-cyan-500/20 blur-3xl" />
				<div className="pointer-events-none absolute inset-0 bg-[radial-gradient(circle_at_top,transparent_20%,rgba(255,255,255,0.04)_21%,transparent_22%)] bg-[length:22px_22px] opacity-40" />
			</div>

			<div className="mx-auto max-w-6xl p-6 space-y-6">
				<div className="flex items-center justify-between">
					<h1 className="bg-gradient-to-b from-white via-white to-white/70 bg-clip-text text-3xl font-extrabold tracking-tight text-transparent sm:text-4xl">SonifyAI</h1>
					<div className="flex items-center gap-4">
					{session ? (
							<div className="flex items-center gap-2 text-sm text-white/80">
								<div className="w-2 h-2 rounded-full bg-green-400"></div>
								<span>Signed in as {session.user?.name || session.user?.email}</span>
							</div>
						) : (
							<div className="flex items-center gap-2 text-sm text-white/80">
								<div className="w-2 h-2 rounded-full bg-yellow-400"></div>
								<span>Guest Mode</span>
							</div>
						)}
						<Link href="/" className="text-sm text-white/80 underline hover:text-white">Back</Link>
					</div>
				</div>
				<p className="text-white/70">
					{isGuestMode
						? "Describe your mood and let SonifyAI generate the perfect playlist preview. Sign in to create playlists on Spotify."
						: "Describe your mood, customize options, and let SonifyAI generate the perfect playlist. Then push it to Spotify."
					}
				</p>
				
				{/* Enhanced explanation about Spotify integration */}
				<div className="rounded-xl border border-blue-300/20 bg-blue-400/10 p-4 mt-4">
					<div className="flex items-start space-x-3">
						<div className="flex-shrink-0">
							<svg className="w-5 h-5 text-blue-400 mt-0.5" fill="currentColor" viewBox="0 0 24 24">
								<path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
							</svg>
						</div>
						<div>
							<h3 className="font-semibold text-blue-200 mb-1">Why "Listen on Spotify"?</h3>
							<p className="text-sm text-blue-200/80">
								We verify all songs on Spotify to ensure they're real and available. Click "Play on Spotify" to hear the full song, 
								add to your playlists, and discover more from the artist. This gives you the best music experience with full access to Spotify's features.
							</p>
						</div>
					</div>
				</div>
				

				{!session && (
					<div className="rounded-xl border border-yellow-300/20 bg-yellow-400/10 p-4">
						<div className="flex items-center justify-between">
							<div>
								<h3 className="font-semibold text-yellow-200">Guest Mode</h3>
								<p className="text-sm text-yellow-200/80">You can generate playlist previews with SonifyAI without signing in. Sign in to create playlists on Spotify.</p>
							</div>
							<Link 
								href="/api/auth/signin/spotify?callbackUrl=/generate"
								className="inline-flex items-center justify-center rounded-lg bg-gradient-to-r from-fuchsia-500 via-purple-500 to-cyan-400 px-4 py-2 text-sm font-semibold text-white shadow-lg hover:shadow-xl transition-all duration-200 hover:scale-105 active:scale-95"
							>
								Sign In
							</Link>
						</div>
					</div>
				)}

				{createdLink && (
					<div className="rounded-md border border-green-300/20 bg-green-400/10 p-3 text-sm text-green-200">
						<strong className="text-green-300">Success:</strong> Playlist created. {" "}
						<a href={createdLink} target="_blank" className="underline">Open on Spotify</a>
					</div>
				)}
				{error && (
					<div className="rounded-md border border-red-300/20 bg-red-400/10 p-3 text-sm text-red-200">{error}</div>
				)}
				
				{/* Success Animation */}
				{showSuccessAnimation && (
					<div className="fixed top-4 right-4 z-50 animate-pulse">
						<div className="bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg flex items-center space-x-2">
							<svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
								<path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
							</svg>
							<span className="font-medium">Success!</span>
						</div>
					</div>
				)}

				<div className="grid grid-cols-1 gap-6 md:grid-cols-2">
					<form onSubmit={handleGenerate} className="space-y-6 rounded-xl border border-white/10 bg-white/5 p-6 backdrop-blur-sm shadow-xl">
						{/* Playlist Templates Section */}
						<div>
							<label className="block text-sm font-medium mb-3 text-white">Quick Start Templates</label>
							<div className="grid grid-cols-2 gap-3 mb-4">
								{playlistTemplates.map((template) => (
									<button
										key={template.id}
										type="button"
										onClick={() => handleTemplateSelect(template)}
										className={`p-3 rounded-lg border transition-all duration-200 text-left ${
											selectedTemplate === template.id
												? `border-fuchsia-400 bg-gradient-to-r ${template.color} text-white shadow-lg`
												: 'border-white/20 bg-white/5 text-white/80 hover:border-white/40 hover:bg-white/10'
										}`}
									>
										<div className="font-medium text-sm">{template.name}</div>
										<div className="text-xs opacity-80 mt-1">{template.description}</div>
									</button>
								))}
							</div>
							<div className="flex items-center justify-between">
								<div className="text-xs text-white/60">
								{selectedTemplate ? (
									<span className="text-fuchsia-300">✓ Template selected: {playlistTemplates.find(t => t.id === selectedTemplate)?.name}</span>
								) : (
									"Click a template to auto-fill the form, or write your own mood below"
								)}
							</div>
								{selectedTemplate && (
									<button
										type="button"
										onClick={clearTemplate}
										className="text-xs text-fuchsia-400 hover:text-fuchsia-300 underline"
									>
										Clear Template
									</button>
								)}
							</div>
						</div>

						{/* Mood Prompt Section */}
						<div>
							<label className="block text-sm font-medium mb-3 text-white">Mood prompt</label>
							<textarea
								className="w-full rounded-lg border border-white/20 bg-white/5 backdrop-blur-sm p-3 text-white placeholder-white/50 focus:border-fuchsia-400 focus:outline-none focus:ring-2 focus:ring-fuchsia-400/20 transition-all duration-200 resize-none"
								rows={4}
								value={prompt}
								onChange={(e) => setPrompt(e.target.value)}
								placeholder="e.g., late night drive under city lights, workout motivation, chill study vibes"
							/>
							<div className="text-xs text-white/60 mt-2">Describe your mood with vivid descriptors and emojis ✨</div>
						</div>

						{/* Language, Genre and Time Period Selection */}
						<div className="space-y-4">
							<h3 className="text-lg font-semibold text-white">Customize Your Playlist</h3>
							
							{/* Language Selection */}
							<div>
								<label className="block text-sm font-medium mb-3 text-white">Language/Region (Optional)</label>
								<div className="relative">
									<select
										value={selectedLanguage}
										onChange={(e) => handleLanguageChange(e.target.value)}
										className="w-full rounded-lg border border-white/20 bg-white/5 backdrop-blur-sm p-3 text-white focus:border-fuchsia-400 focus:outline-none focus:ring-2 focus:ring-fuchsia-400/20 transition-all duration-200 appearance-none cursor-pointer"
									>
										<option value="" className="bg-gray-800 text-white">Any language</option>
										{languages.map((lang) => (
											<option key={lang.value} value={lang.value} className="bg-gray-800 text-white">
												{lang.flag} {lang.label}
											</option>
										))}
									</select>
									<div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
										<svg className="w-5 h-5 text-white/60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
										</svg>
									</div>
								</div>
								<div className="text-xs text-white/60 mt-2">
									Choose a language/region to see relevant genres
								</div>
							</div>

							{/* Genre Selection */}
							<div>
								<label className="block text-sm font-medium mb-3 text-white">
									Genre (Optional)
									{selectedLanguage && (
										<span className="text-xs text-fuchsia-300 ml-2">
											- {languages.find(l => l.value === selectedLanguage)?.label} genres
										</span>
									)}
								</label>
								<div className="relative">
									<select
										key={`genre-${selectedLanguage}`} // Force re-render when language changes
										value={selectedGenre}
										onChange={(e) => setSelectedGenre(e.target.value)}
										className="w-full rounded-lg border border-white/20 bg-white/5 backdrop-blur-sm p-3 text-white focus:border-fuchsia-400 focus:outline-none focus:ring-2 focus:ring-fuchsia-400/20 transition-all duration-200 appearance-none cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed"
										disabled={!selectedLanguage}
									>
										<option value="" className="bg-gray-800 text-white">
											{selectedLanguage ? `Any ${languages.find(l => l.value === selectedLanguage)?.label} genre` : "Select a language first"}
										</option>
										{currentGenres.map((genre) => (
											<option key={genre} value={genre} className="bg-gray-800 text-white">
												{genre}
											</option>
										))}
									</select>
									<div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
										<svg className="w-5 h-5 text-white/60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
										</svg>
									</div>
								</div>
								<div className="text-xs text-yellow-200 mt-2">
									💡 {selectedLanguage ? `Showing ${selectedLanguage} genres - choose one that matches your mood` : "Select a language above to see relevant genres"}
								</div>
							</div>

						</div>

						{/* Basic Settings */}
						<div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
							<div>
								<label className="block text-sm font-medium mb-3 text-white">Playlist title</label>
								<input 
									className="w-full rounded-lg border border-white/20 bg-white/5 backdrop-blur-sm p-3 text-white placeholder-white/50 focus:border-fuchsia-400 focus:outline-none focus:ring-2 focus:ring-fuchsia-400/20 transition-all duration-200" 
									value={title} 
									onChange={(e) => setTitle(e.target.value)} 
								/>
							</div>
							<div>
								<label className="block text-sm font-medium mb-3 text-white">Number of songs: <span className="font-semibold text-fuchsia-300">{numSongs}</span></label>
								<input
									type="range"
									min={5}
									max={50}
									step={5}
									className="w-full accent-fuchsia-400 h-2 bg-white/10 rounded-lg appearance-none cursor-pointer"
									value={numSongs}
									onChange={(e) => setNumSongs(parseInt(e.target.value || "0", 10))}
								/>
								<div className="flex justify-between text-xs text-white/60 mt-1">
									<span>5</span>
									<span>50</span>
								</div>
							</div>
							<div className="sm:col-span-2">
								<label className="block text-sm font-medium mb-3 text-white">Description</label>
								<input 
									className="w-full rounded-lg border border-white/20 bg-white/5 backdrop-blur-sm p-3 text-white placeholder-white/50 focus:border-fuchsia-400 focus:outline-none focus:ring-2 focus:ring-fuchsia-400/20 transition-all duration-200" 
									value={description} 
									onChange={(e) => setDescription(e.target.value)} 
									placeholder="Generated by SonifyAI" 
								/>
							</div>
							{!isGuestMode && (
								<div className="flex items-center gap-3 sm:col-span-2">
									<input 
										id="public" 
										type="checkbox" 
										checked={isPublic} 
										onChange={(e) => setIsPublic(e.target.checked)}
										className="w-4 h-4 text-fuchsia-400 bg-white/5 border-white/20 rounded focus:ring-fuchsia-400 focus:ring-2"
									/>
									<label htmlFor="public" className="text-sm text-white">Public playlist</label>
								</div>
							)}
						</div>
						<div className="flex items-center gap-3">
							<button
								type="submit"
								disabled={loading}
								className="inline-flex items-center justify-center rounded-lg bg-gradient-to-r from-fuchsia-500 via-purple-500 to-cyan-400 px-6 py-3 text-sm font-semibold text-white shadow-lg hover:shadow-xl transition-all duration-200 hover:scale-105 active:scale-95 disabled:opacity-60 disabled:hover:scale-100"
							>
								{loading ? (
									<>
										<div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
										<span>SonifyAI is crafting your playlist...</span>
									</>
								) : (
									<>
										<svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
											<path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
										</svg>
										<span>Generate with SonifyAI</span>
									</>
								)}
							</button>
							<Link href="/" className="text-sm text-white/80 underline hover:text-white">Cancel</Link>
						</div>
					</form>

					<div className="space-y-4">
						<div className="rounded-xl border border-white/10 bg-white/5 backdrop-blur-sm shadow-xl">
							<div className="p-6 border-b border-white/10 flex items-center justify-between">
								<h2 className="text-lg font-semibold text-white">Preview</h2>
								{playlist && (
									<button
										onClick={handleRefresh}
										disabled={isRefreshing}
										className="inline-flex items-center space-x-2 bg-fuchsia-500 hover:bg-fuchsia-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 hover:scale-105 active:scale-95 disabled:opacity-60 disabled:hover:scale-100 shadow-lg hover:shadow-xl"
									>
										{isRefreshing ? (
											<>
												<div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
												<span>Refreshing...</span>
											</>
										) : (
											<>
												<svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
													<path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
												</svg>
												<span>Get New Suggestions</span>
											</>
										)}
									</button>
								)}
							</div>
							{!playlist ? (
								<div className="p-6 text-sm text-white/60">
									{loading ? (
										<div className="flex items-center space-x-3">
											<div className="w-6 h-6 border-2 border-fuchsia-400 border-t-transparent rounded-full animate-spin"></div>
											<span>SonifyAI is crafting your perfect playlist...</span>
										</div>
									) : (
										"No playlist yet. Generate one to preview tracks."
									)}
								</div>
							) : (
								<>
									<div className="flex gap-4 p-6 items-center">
										<img src={playlist.imageUrl} alt="cover" className="w-24 h-24 rounded object-cover" />
										<div className="flex-1">
											<h3 className="text-lg font-medium text-white">{playlist.name}</h3>
											<p className="text-sm text-white/70">{playlist.description}</p>
											
											{/* Enhanced Verification Stats */}
											{playlist.verificationStats && (
												<div className="mt-3 p-3 bg-white/5 rounded-lg border border-white/10">
													<div className="text-xs text-white/80 font-medium mb-2">Verification Status</div>
													<div className="flex items-center gap-4">
														<span className="flex items-center gap-2">
															<span className="w-3 h-3 rounded-full bg-green-400 animate-pulse"></span>
															<span className="text-green-300 font-medium">{playlist.verificationStats.verifiedOnSpotify}</span>
															<span className="text-white/70">verified on Spotify</span>
														</span>
														{playlist.verificationStats.unverified > 0 && (
															<span className="flex items-center gap-2">
																<span className="w-3 h-3 rounded-full bg-yellow-400"></span>
																<span className="text-yellow-300 font-medium">{playlist.verificationStats.unverified}</span>
																<span className="text-white/70">unverified</span>
															</span>
														)}
													</div>
													<div className="mt-2 text-xs text-white/60">
														{playlist.verificationStats.verifiedOnSpotify === playlist.verificationStats.totalGenerated ? 
															"🎉 All songs verified! Perfect playlist ready." :
															"✨ Most songs verified - great playlist quality!"
														}
													</div>
												</div>
											)}
											
											{isGuestMode ? (
												<div className="text-sm text-yellow-200 mt-2">
													Sign in to create this SonifyAI playlist on Spotify
												</div>
											) : createdLink ? (
												<a href={createdLink} target="_blank" className="inline-flex items-center space-x-2 bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg text-sm font-semibold shadow-lg hover:shadow-xl transition-all duration-200 hover:scale-105 active:scale-95 mt-2">
													<svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
														<path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
													</svg>
													<span>Open on Spotify</span>
												</a>
											) : (
												<button onClick={handleCreateOnSpotify} disabled={creating} className="inline-flex items-center justify-center rounded-lg bg-gradient-to-r from-fuchsia-500 via-purple-500 to-cyan-400 px-4 py-2 text-sm font-semibold text-white shadow-lg hover:shadow-xl transition-all duration-200 hover:scale-105 active:scale-95 disabled:opacity-60 disabled:hover:scale-100 mt-2">
													{creating ? (
														<>
															<div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
															<span>Creating on Spotify...</span>
														</>
													) : (
														<>
															<svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
																<path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
															</svg>
															<span>Create on Spotify</span>
														</>
													)}
												</button>
											)}
										</div>
									</div>
									<div className="border-t border-white/10 max-h-[420px] overflow-auto">
										<ul className="divide-y divide-white/10">
											{playlist.tracks.map((t, idx) => (
												<li key={t.id} className="p-4 text-sm hover:bg-white/5 transition-colors">
													<div className="flex items-center gap-4">
														<span className="w-6 text-white/50 font-mono text-xs flex-shrink-0">{idx + 1}</span>
														<div className="flex-1 min-w-0">
															<AudioPlayer
																previewUrl={t.previewUrl || undefined}
																title={t.title}
																artist={t.artist}
																spotifyId={t.spotifyId}
																className="w-full"
																onAddToPlaylist={() => handleAddToPlaylist(t.title, t.artist)}
																onShareSong={() => t.spotifyId && handleShareSong(t.title, t.artist, t.spotifyId)}
															/>
														</div>
														{t.spotifyId && (
															<span className="text-green-400 text-xs flex-shrink-0" title="Verified on Spotify">
																✓
															</span>
														)}
													</div>
												</li>
											))}
										</ul>
									</div>
								</>
							)}
						</div>
					</div>
				</div>
			</div>
		</div>
	);
}
