"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { useSession } from "next-auth/react";

type Playlist = {
	id: string;
	name: string;
	description: string;
	public: boolean;
	imageUrl: string;
	externalUrl: string;
	tracks: { id: string; title: string; artist: string; previewUrl: string | null; spotifyId?: string | null }[];
	verificationStats?: {
		totalGenerated: number;
		verifiedOnSpotify: number;
		unverified: number;
	};
};

export default function GeneratePage() {
	const { data: session, status } = useSession();
	const [prompt, setPrompt] = useState("");
	const [title, setTitle] = useState("My Mood.ai Playlist");
	const [description, setDescription] = useState("Generated by Mood.ai");
	const [numSongs, setNumSongs] = useState(15);
	const [isPublic, setIsPublic] = useState(true);
	const [loading, setLoading] = useState(false);
	const [creating, setCreating] = useState(false);
	const [error, setError] = useState<string | null>(null);
	const [playlist, setPlaylist] = useState<Playlist | null>(null);
	const [createdLink, setCreatedLink] = useState<string | null>(null);
	// Use session directly instead of separate isGuestMode state
	const isGuestMode = !session || status !== "authenticated";
	
	// New state for genre selection
	const [selectedLanguage, setSelectedLanguage] = useState("");
	const [selectedGenre, setSelectedGenre] = useState("");

	// Language/Region options
	const languages = [
		{ value: "hollywood", label: "Hollywood (English)", flag: "🇺🇸" },
		{ value: "bollywood", label: "Bollywood (Hindi)", flag: "🇮🇳" },
		{ value: "korean", label: "K-Pop (Korean)", flag: "🇰🇷" },
		{ value: "japanese", label: "J-Pop (Japanese)", flag: "🇯🇵" },
		{ value: "spanish", label: "Latin (Spanish)", flag: "🇪🇸" },
		{ value: "french", label: "French", flag: "🇫🇷" },
		{ value: "german", label: "German", flag: "🇩🇪" },
		{ value: "any", label: "Any Language", flag: "🌍" }
	];

	// Genre mapping based on language/region
	const genreMapping = {
		hollywood: [
			"Pop", "Rock", "Hip-Hop", "R&B", "Electronic", "Jazz", "Classical", "Country", 
			"Indie", "Alternative", "Folk", "Blues", "Reggae", "Funk", "Soul", "Punk",
			"Metal", "Gospel", "Ambient", "House", "Techno", "Trap", "Drill", "Afrobeats"
		],
		bollywood: [
			"Bollywood Pop", "Romantic", "Dance", "Item Song", "Classical Fusion", "Sufi", 
			"Ghazal", "Qawwali", "Folk Fusion", "Indie Hindi", "Retro Bollywood", "Modern Bollywood",
			"Bhangra", "Punjabi", "Marathi", "Tamil", "Telugu", "Bengali", "Gujarati", "Rajasthani"
		],
		korean: [
			"K-Pop", "K-Hip-Hop", "K-R&B", "K-Rock", "K-Indie", "K-Ballad", "K-Electronic",
			"K-Folk", "K-Jazz", "K-Classical", "K-Trap", "K-Drill", "K-OST", "K-Trot"
		],
		japanese: [
			"J-Pop", "J-Rock", "J-Hip-Hop", "J-R&B", "J-Electronic", "J-Indie", "J-Ballad",
			"J-Folk", "J-Jazz", "J-Classical", "J-OST", "J-Idol", "J-Visual Kei", "J-Anime"
		],
		spanish: [
			"Reggaeton", "Salsa", "Bachata", "Merengue", "Cumbia", "Latin Pop", "Latin Rock",
			"Flamenco", "Latin Jazz", "Latin Hip-Hop", "Trap Latino", "Latin R&B", "Mariachi",
			"Latin Folk", "Latin Electronic", "Latin Indie"
		],
		french: [
			"Chanson", "French Pop", "French Rock", "French Hip-Hop", "French Electronic",
			"French Jazz", "French Indie", "French Folk", "French R&B", "French Classical",
			"French House", "French Techno", "French Ballad"
		],
		german: [
			"German Pop", "German Rock", "German Hip-Hop", "German Electronic", "German Indie",
			"German Folk", "German Jazz", "German Classical", "German House", "German Techno",
			"German Ballad", "German R&B", "Schlager"
		],
		any: [
			"Pop", "Rock", "Hip-Hop", "R&B", "Electronic", "Jazz", "Classical", "Country", 
			"Indie", "Alternative", "Folk", "Blues", "Reggae", "Funk", "Soul", "Punk",
			"Metal", "Gospel", "Ambient", "House", "Techno", "Trap", "Drill", "Afrobeats",
			"Bollywood", "K-Pop", "J-Pop", "Latin", "Chanson", "German Pop"
		]
	};

	// Get current genre options based on selected language
	const getCurrentGenres = () => {
		return selectedLanguage ? genreMapping[selectedLanguage as keyof typeof genreMapping] || genreMapping.any : genreMapping.any;
	};

	// Handle language change and reset genre selection
	const handleLanguageChange = (newLanguage: string) => {
		setSelectedLanguage(newLanguage);
		setSelectedGenre(""); // Reset genre selection when language changes
	};


	async function handleGenerate(e: React.FormEvent) {
		e.preventDefault();
		setLoading(true);
		setError(null);
		setPlaylist(null);
		setCreatedLink(null);
		
		try {
			const res = await fetch("/api/generate", {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({ 
					prompt, 
					title, 
					description, 
					numSongs, 
					isPublic,
					language: selectedLanguage,
					genre: selectedGenre
				}),
			});
			if (!res.ok) throw new Error("Request failed");
			const data = (await res.json()) as { success: boolean; playlist: Playlist };
			setPlaylist(data.playlist);
		} catch (err: any) {
			setError(err?.message || "Something went wrong");
		} finally {
			setLoading(false);
		}
	}

	async function handleCreateOnSpotify() {
		if (!playlist || isGuestMode) return;
		setCreating(true);
		setError(null);
		setCreatedLink(null);
		try {
			const res = await fetch("/api/spotify/create-playlist", {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({
					title,
					description,
					isPublic,
					tracks: playlist.tracks.map(t => ({ title: t.title, artist: t.artist })),
				}),
			});
			if (!res.ok) throw new Error("Spotify request failed");
			const data = await res.json();
			setCreatedLink(data.externalUrl || null);
		} catch (err: any) {
			setError(err?.message || "Failed to create on Spotify");
		} finally {
			setCreating(false);
		}
	}


	return (
		<div className="relative max-w-full overflow-hidden">
			{/* Background */}
			<div className="absolute inset-0 -z-10">
				<div className="absolute inset-0 bg-gradient-to-b from-purple-900/40 via-black to-black" />
				<div className="pointer-events-none absolute -top-40 -left-40 h-[32rem] w-[32rem] rounded-full bg-fuchsia-500/20 blur-3xl" />
				<div className="pointer-events-none absolute -bottom-40 -right-40 h-[32rem] w-[32rem] rounded-full bg-cyan-500/20 blur-3xl" />
				<div className="pointer-events-none absolute inset-0 bg-[radial-gradient(circle_at_top,transparent_20%,rgba(255,255,255,0.04)_21%,transparent_22%)] bg-[length:22px_22px] opacity-40" />
			</div>

			<div className="mx-auto max-w-6xl p-6 space-y-6">
				<div className="flex items-center justify-between">
					<h1 className="bg-gradient-to-b from-white via-white to-white/70 bg-clip-text text-3xl font-extrabold tracking-tight text-transparent sm:text-4xl">Mood.ai Generator</h1>
					<div className="flex items-center gap-4">
					{session ? (
							<div className="flex items-center gap-2 text-sm text-white/80">
								<div className="w-2 h-2 rounded-full bg-green-400"></div>
								<span>Signed in as {session.user?.name || session.user?.email}</span>
							</div>
						) : (
							<div className="flex items-center gap-2 text-sm text-white/80">
								<div className="w-2 h-2 rounded-full bg-yellow-400"></div>
								<span>Guest Mode</span>
							</div>
						)}
						<Link href="/" className="text-sm text-white/80 underline hover:text-white">Back</Link>
					</div>
				</div>
				<p className="text-white/70">
					{isGuestMode
						? "Describe your mood and let Mood.ai generate the perfect playlist preview. Sign in to create playlists on Spotify."
						: "Describe your mood, customize options, and let Mood.ai generate the perfect playlist. Then push it to Spotify."
					}
				</p>
				

				{!session && (
					<div className="rounded-xl border border-yellow-300/20 bg-yellow-400/10 p-4">
						<div className="flex items-center justify-between">
							<div>
								<h3 className="font-semibold text-yellow-200">Guest Mode</h3>
								<p className="text-sm text-yellow-200/80">You can generate playlist previews with Mood.ai without signing in. Sign in to create playlists on Spotify.</p>
							</div>
							<Link 
								href="/api/auth/signin/spotify?callbackUrl=/generate"
								className="inline-flex items-center justify-center rounded-lg bg-gradient-to-r from-fuchsia-500 via-purple-500 to-cyan-400 px-4 py-2 text-sm font-semibold text-white shadow-lg hover:shadow-xl transition-all duration-200 hover:scale-105 active:scale-95"
							>
								Sign In
							</Link>
						</div>
					</div>
				)}

				{createdLink && (
					<div className="rounded-md border border-green-300/20 bg-green-400/10 p-3 text-sm text-green-200">
						<strong className="text-green-300">Success:</strong> Playlist created. {" "}
						<a href={createdLink} target="_blank" className="underline">Open on Spotify</a>
					</div>
				)}
				{error && (
					<div className="rounded-md border border-red-300/20 bg-red-400/10 p-3 text-sm text-red-200">{error}</div>
				)}

				<div className="grid grid-cols-1 gap-6 md:grid-cols-2">
					<form onSubmit={handleGenerate} className="space-y-6 rounded-xl border border-white/10 bg-white/5 p-6 backdrop-blur-sm shadow-xl">
						{/* Mood Prompt Section */}
						<div>
							<label className="block text-sm font-medium mb-3 text-white">Mood prompt</label>
							<textarea
								className="w-full rounded-lg border border-white/20 bg-white/5 backdrop-blur-sm p-3 text-white placeholder-white/50 focus:border-fuchsia-400 focus:outline-none focus:ring-2 focus:ring-fuchsia-400/20 transition-all duration-200 resize-none"
								rows={4}
								value={prompt}
								onChange={(e) => setPrompt(e.target.value)}
								placeholder="e.g., late night drive under city lights, workout motivation, chill study vibes"
							/>
							<div className="text-xs text-white/60 mt-2">Describe your mood with vivid descriptors and emojis ✨</div>
						</div>

						{/* Language, Genre and Time Period Selection */}
						<div className="space-y-4">
							<h3 className="text-lg font-semibold text-white">Customize Your Playlist</h3>
							
							{/* Language Selection */}
							<div>
								<label className="block text-sm font-medium mb-3 text-white">Language/Region (Optional)</label>
								<div className="relative">
									<select
										value={selectedLanguage}
										onChange={(e) => handleLanguageChange(e.target.value)}
										className="w-full rounded-lg border border-white/20 bg-white/5 backdrop-blur-sm p-3 text-white focus:border-fuchsia-400 focus:outline-none focus:ring-2 focus:ring-fuchsia-400/20 transition-all duration-200 appearance-none cursor-pointer"
									>
										<option value="" className="bg-gray-800 text-white">Any language</option>
										{languages.map((lang) => (
											<option key={lang.value} value={lang.value} className="bg-gray-800 text-white">
												{lang.flag} {lang.label}
											</option>
										))}
									</select>
									<div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
										<svg className="w-5 h-5 text-white/60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
										</svg>
									</div>
								</div>
								<div className="text-xs text-white/60 mt-2">
									Choose a language/region to see relevant genres
								</div>
							</div>

							{/* Genre Selection */}
							<div>
								<label className="block text-sm font-medium mb-3 text-white">
									Genre (Optional)
									{selectedLanguage && (
										<span className="text-xs text-fuchsia-300 ml-2">
											- {languages.find(l => l.value === selectedLanguage)?.label} genres
										</span>
									)}
								</label>
								<div className="relative">
									<select
										value={selectedGenre}
										onChange={(e) => setSelectedGenre(e.target.value)}
										className="w-full rounded-lg border border-white/20 bg-white/5 backdrop-blur-sm p-3 text-white focus:border-fuchsia-400 focus:outline-none focus:ring-2 focus:ring-fuchsia-400/20 transition-all duration-200 appearance-none cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed"
										disabled={!selectedLanguage}
									>
										<option value="" className="bg-gray-800 text-white">
											{selectedLanguage ? `Any ${languages.find(l => l.value === selectedLanguage)?.label} genre` : "Select a language first"}
										</option>
										{getCurrentGenres().map((genre) => (
											<option key={genre} value={genre} className="bg-gray-800 text-white">
												{genre}
											</option>
										))}
									</select>
									<div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
										<svg className="w-5 h-5 text-white/60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
										</svg>
									</div>
								</div>
								{!selectedLanguage && (
									<div className="text-xs text-yellow-200 mt-2">
										💡 Select a language above to see relevant genres
									</div>
								)}
							</div>

						</div>

						{/* Basic Settings */}
						<div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
							<div>
								<label className="block text-sm font-medium mb-3 text-white">Playlist title</label>
								<input 
									className="w-full rounded-lg border border-white/20 bg-white/5 backdrop-blur-sm p-3 text-white placeholder-white/50 focus:border-fuchsia-400 focus:outline-none focus:ring-2 focus:ring-fuchsia-400/20 transition-all duration-200" 
									value={title} 
									onChange={(e) => setTitle(e.target.value)} 
								/>
							</div>
							<div>
								<label className="block text-sm font-medium mb-3 text-white">Number of songs: <span className="font-semibold text-fuchsia-300">{numSongs}</span></label>
								<input
									type="range"
									min={5}
									max={50}
									step={5}
									className="w-full accent-fuchsia-400 h-2 bg-white/10 rounded-lg appearance-none cursor-pointer"
									value={numSongs}
									onChange={(e) => setNumSongs(parseInt(e.target.value || "0", 10))}
								/>
								<div className="flex justify-between text-xs text-white/60 mt-1">
									<span>5</span>
									<span>50</span>
								</div>
							</div>
							<div className="sm:col-span-2">
								<label className="block text-sm font-medium mb-3 text-white">Description</label>
								<input 
									className="w-full rounded-lg border border-white/20 bg-white/5 backdrop-blur-sm p-3 text-white placeholder-white/50 focus:border-fuchsia-400 focus:outline-none focus:ring-2 focus:ring-fuchsia-400/20 transition-all duration-200" 
									value={description} 
									onChange={(e) => setDescription(e.target.value)} 
									placeholder="Generated by Mood.ai" 
								/>
							</div>
							{!isGuestMode && (
								<div className="flex items-center gap-3 sm:col-span-2">
									<input 
										id="public" 
										type="checkbox" 
										checked={isPublic} 
										onChange={(e) => setIsPublic(e.target.checked)}
										className="w-4 h-4 text-fuchsia-400 bg-white/5 border-white/20 rounded focus:ring-fuchsia-400 focus:ring-2"
									/>
									<label htmlFor="public" className="text-sm text-white">Public playlist</label>
								</div>
							)}
						</div>
						<div className="flex items-center gap-3">
							<button
								type="submit"
								disabled={loading}
								className="inline-flex items-center justify-center rounded-lg bg-gradient-to-r from-fuchsia-500 via-purple-500 to-cyan-400 px-6 py-2 text-sm font-semibold text-white shadow-lg hover:shadow-xl transition-all duration-200 hover:scale-105 active:scale-95 disabled:opacity-60 disabled:hover:scale-100"
							>
								{loading ? "Mood.ai is working..." : "Generate with Mood.ai"}
							</button>
							<Link href="/" className="text-sm text-white/80 underline hover:text-white">Cancel</Link>
						</div>
					</form>

					<div className="space-y-4">
						<div className="rounded-xl border border-white/10 bg-white/5 backdrop-blur-sm shadow-xl">
							<div className="p-6 border-b border-white/10">
								<h2 className="text-lg font-semibold text-white">Preview</h2>
							</div>
							{!playlist ? (
								<div className="p-6 text-sm text-white/60">No playlist yet. Generate one to preview tracks.</div>
							) : (
								<>
									<div className="flex gap-4 p-6 items-center">
										<img src={playlist.imageUrl} alt="cover" className="w-24 h-24 rounded object-cover" />
										<div className="flex-1">
											<h3 className="text-lg font-medium text-white">{playlist.name}</h3>
											<p className="text-sm text-white/70">{playlist.description}</p>
											
											{/* Verification Stats */}
											{playlist.verificationStats && (
												<div className="mt-2 text-xs text-white/60">
													<div className="flex items-center gap-4">
														<span className="flex items-center gap-1">
															<span className="w-2 h-2 rounded-full bg-green-400"></span>
															{playlist.verificationStats.verifiedOnSpotify} verified on Spotify
														</span>
														{playlist.verificationStats.unverified > 0 && (
															<span className="flex items-center gap-1">
																<span className="w-2 h-2 rounded-full bg-yellow-400"></span>
																{playlist.verificationStats.unverified} unverified
															</span>
														)}
													</div>
												</div>
											)}
											
											{isGuestMode ? (
												<div className="text-sm text-yellow-200 mt-2">
													Sign in to create this Mood.ai playlist on Spotify
												</div>
											) : createdLink ? (
												<a href={createdLink} target="_blank" className="text-sm underline text-white mt-2 inline-block">Open on Spotify</a>
											) : (
												<button onClick={handleCreateOnSpotify} disabled={creating} className="inline-flex items-center justify-center rounded-lg bg-gradient-to-r from-fuchsia-500 via-purple-500 to-cyan-400 px-4 py-2 text-sm font-semibold text-white shadow-lg hover:shadow-xl transition-all duration-200 hover:scale-105 active:scale-95 disabled:opacity-60 disabled:hover:scale-100 mt-2">
													{creating ? "Creating..." : "Create on Spotify"}
												</button>
											)}
										</div>
									</div>
									<div className="border-t border-white/10 max-h-[420px] overflow-auto">
										<ul className="divide-y divide-white/10">
											{playlist.tracks.map((t, idx) => (
												<li key={t.id} className="p-4 text-sm flex items-center gap-4 text-white/90 hover:bg-white/5 transition-colors">
													<span className="w-6 text-white/50 font-mono text-xs">{idx + 1}</span>
													<div className="flex-1">
														<div className="font-medium text-white flex items-center gap-2">
															{t.title}
															{t.spotifyId && (
																<span className="text-green-400 text-xs" title="Verified on Spotify">
																	✓
																</span>
															)}
														</div>
														<div className="text-white/60 text-sm">{t.artist}</div>
													</div>
												</li>
											))}
										</ul>
									</div>
								</>
							)}
						</div>
					</div>
				</div>
			</div>
		</div>
	);
}
