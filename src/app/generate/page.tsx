"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { useSession } from "next-auth/react";

type Playlist = {
	id: string;
	name: string;
	description: string;
	public: boolean;
	imageUrl: string;
	externalUrl: string;
	tracks: { id: string; title: string; artist: string; previewUrl: string | null; spotifyId?: string | null }[];
	verificationStats?: {
		totalGenerated: number;
		verifiedOnSpotify: number;
		unverified: number;
	};
};

export default function GeneratePage() {
	const { data: session, status } = useSession();
	const [prompt, setPrompt] = useState("");
	const [title, setTitle] = useState("My Mood.ai Playlist");
	const [description, setDescription] = useState("Generated by Mood.ai");
	const [numSongs, setNumSongs] = useState(15);
	const [isPublic, setIsPublic] = useState(true);
	const [loading, setLoading] = useState(false);
	const [creating, setCreating] = useState(false);
	const [error, setError] = useState<string | null>(null);
	const [playlist, setPlaylist] = useState<Playlist | null>(null);
	const [createdLink, setCreatedLink] = useState<string | null>(null);
	const [isGuestMode, setIsGuestMode] = useState(!session);
	
	// New state for genre and time period selection
	const [selectedLanguage, setSelectedLanguage] = useState("");
	const [selectedGenre, setSelectedGenre] = useState("");
	const [selectedTimePeriod, setSelectedTimePeriod] = useState("");
	const [customYearRange, setCustomYearRange] = useState({ start: "", end: "" });
	const [timePeriodType, setTimePeriodType] = useState<"decade" | "specific-year" | "year-range">("decade");

	// Language/Region options
	const languages = [
		{ value: "hollywood", label: "Hollywood (English)", flag: "🇺🇸" },
		{ value: "bollywood", label: "Bollywood (Hindi)", flag: "🇮🇳" },
		{ value: "korean", label: "K-Pop (Korean)", flag: "🇰🇷" },
		{ value: "japanese", label: "J-Pop (Japanese)", flag: "🇯🇵" },
		{ value: "spanish", label: "Latin (Spanish)", flag: "🇪🇸" },
		{ value: "french", label: "French", flag: "🇫🇷" },
		{ value: "german", label: "German", flag: "🇩🇪" },
		{ value: "any", label: "Any Language", flag: "🌍" }
	];

	// Genre mapping based on language/region
	const genreMapping = {
		hollywood: [
			"Pop", "Rock", "Hip-Hop", "R&B", "Electronic", "Jazz", "Classical", "Country", 
			"Indie", "Alternative", "Folk", "Blues", "Reggae", "Funk", "Soul", "Punk",
			"Metal", "Gospel", "Ambient", "House", "Techno", "Trap", "Drill", "Afrobeats"
		],
		bollywood: [
			"Bollywood Pop", "Romantic", "Dance", "Item Song", "Classical Fusion", "Sufi", 
			"Ghazal", "Qawwali", "Folk Fusion", "Indie Hindi", "Retro Bollywood", "Modern Bollywood",
			"Bhangra", "Punjabi", "Marathi", "Tamil", "Telugu", "Bengali", "Gujarati", "Rajasthani"
		],
		korean: [
			"K-Pop", "K-Hip-Hop", "K-R&B", "K-Rock", "K-Indie", "K-Ballad", "K-Electronic",
			"K-Folk", "K-Jazz", "K-Classical", "K-Trap", "K-Drill", "K-OST", "K-Trot"
		],
		japanese: [
			"J-Pop", "J-Rock", "J-Hip-Hop", "J-R&B", "J-Electronic", "J-Indie", "J-Ballad",
			"J-Folk", "J-Jazz", "J-Classical", "J-OST", "J-Idol", "J-Visual Kei", "J-Anime"
		],
		spanish: [
			"Reggaeton", "Salsa", "Bachata", "Merengue", "Cumbia", "Latin Pop", "Latin Rock",
			"Flamenco", "Latin Jazz", "Latin Hip-Hop", "Trap Latino", "Latin R&B", "Mariachi",
			"Latin Folk", "Latin Electronic", "Latin Indie"
		],
		french: [
			"Chanson", "French Pop", "French Rock", "French Hip-Hop", "French Electronic",
			"French Jazz", "French Indie", "French Folk", "French R&B", "French Classical",
			"French House", "French Techno", "French Ballad"
		],
		german: [
			"German Pop", "German Rock", "German Hip-Hop", "German Electronic", "German Indie",
			"German Folk", "German Jazz", "German Classical", "German House", "German Techno",
			"German Ballad", "German R&B", "Schlager"
		],
		any: [
			"Pop", "Rock", "Hip-Hop", "R&B", "Electronic", "Jazz", "Classical", "Country", 
			"Indie", "Alternative", "Folk", "Blues", "Reggae", "Funk", "Soul", "Punk",
			"Metal", "Gospel", "Ambient", "House", "Techno", "Trap", "Drill", "Afrobeats",
			"Bollywood", "K-Pop", "J-Pop", "Latin", "Chanson", "German Pop"
		]
	};

	// Get current genre options based on selected language
	const getCurrentGenres = () => {
		return selectedLanguage ? genreMapping[selectedLanguage as keyof typeof genreMapping] || genreMapping.any : genreMapping.any;
	};

	// Handle language change and reset genre selection
	const handleLanguageChange = (newLanguage: string) => {
		setSelectedLanguage(newLanguage);
		setSelectedGenre(""); // Reset genre selection when language changes
	};

	// Time period options
	const decades = [
		"1950s", "1960s", "1970s", "1980s", "1990s", "2000s", "2010s", "2020s"
	];

	const recentYears = Array.from({ length: 25 }, (_, i) => (2024 - i).toString());

	async function handleGenerate(e: React.FormEvent) {
		e.preventDefault();
		setLoading(true);
		setError(null);
		setPlaylist(null);
		setCreatedLink(null);
		
		// Build time period string based on selection
		let timePeriodString = "";
		if (timePeriodType === "decade" && selectedTimePeriod) {
			timePeriodString = selectedTimePeriod;
		} else if (timePeriodType === "specific-year" && selectedTimePeriod) {
			timePeriodString = selectedTimePeriod;
		} else if (timePeriodType === "year-range" && customYearRange.start && customYearRange.end) {
			timePeriodString = `${customYearRange.start}-${customYearRange.end}`;
		}
		
		try {
			const res = await fetch("/api/generate", {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({ 
					prompt, 
					title, 
					description, 
					numSongs, 
					isPublic,
					language: selectedLanguage,
					genre: selectedGenre,
					timePeriod: timePeriodString
				}),
			});
			if (!res.ok) throw new Error("Request failed");
			const data = (await res.json()) as { success: boolean; playlist: Playlist };
			setPlaylist(data.playlist);
		} catch (err: any) {
			setError(err?.message || "Something went wrong");
		} finally {
			setLoading(false);
		}
	}

	async function handleCreateOnSpotify() {
		if (!playlist || isGuestMode) return;
		setCreating(true);
		setError(null);
		setCreatedLink(null);
		try {
			const res = await fetch("/api/spotify/create-playlist", {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({
					title,
					description,
					isPublic,
					tracks: playlist.tracks.map(t => ({ title: t.title, artist: t.artist })),
				}),
			});
			if (!res.ok) throw new Error("Spotify request failed");
			const data = await res.json();
			setCreatedLink(data.externalUrl || null);
		} catch (err: any) {
			setError(err?.message || "Failed to create on Spotify");
		} finally {
			setCreating(false);
		}
	}

	// Update guest mode when session changes
	useEffect(() => {
		if (status === "authenticated" && isGuestMode) {
			setIsGuestMode(false);
		} else if (status === "unauthenticated" && !isGuestMode) {
			setIsGuestMode(true);
		}
	}, [status, isGuestMode]);

	return (
		<div className="relative max-w-full overflow-hidden">
			{/* Background */}
			<div className="absolute inset-0 -z-10">
				<div className="absolute inset-0 bg-gradient-to-b from-purple-900/40 via-black to-black" />
				<div className="pointer-events-none absolute -top-40 -left-40 h-[32rem] w-[32rem] rounded-full bg-fuchsia-500/20 blur-3xl" />
				<div className="pointer-events-none absolute -bottom-40 -right-40 h-[32rem] w-[32rem] rounded-full bg-cyan-500/20 blur-3xl" />
				<div className="pointer-events-none absolute inset-0 bg-[radial-gradient(circle_at_top,transparent_20%,rgba(255,255,255,0.04)_21%,transparent_22%)] bg-[length:22px_22px] opacity-40" />
			</div>

			<div className="mx-auto max-w-6xl p-6 space-y-6">
				<div className="flex items-center justify-between">
					<h1 className="bg-gradient-to-b from-white via-white to-white/70 bg-clip-text text-3xl font-extrabold tracking-tight text-transparent sm:text-4xl">Mood.ai Generator</h1>
					<div className="flex items-center gap-4">
						{session ? (
							<div className="flex items-center gap-2 text-sm text-white/80">
								<div className="w-2 h-2 rounded-full bg-green-400"></div>
								<span>Signed in as {session.user?.name || session.user?.email}</span>
							</div>
						) : (
							<div className="flex items-center gap-2 text-sm text-white/80">
								<div className="w-2 h-2 rounded-full bg-yellow-400"></div>
								<span>Guest Mode</span>
							</div>
						)}
						<Link href="/" className="text-sm text-white/80 underline hover:text-white">Back</Link>
					</div>
				</div>
				<p className="text-white/70">
					{isGuestMode
						? "Describe your mood and let Mood.ai generate the perfect playlist preview. Sign in to create playlists on Spotify."
						: "Describe your mood, customize options, and let Mood.ai generate the perfect playlist. Then push it to Spotify."
					}
				</p>

				{!session && (
					<div className="rounded-xl border border-yellow-300/20 bg-yellow-400/10 p-4">
						<div className="flex items-center justify-between">
							<div>
								<h3 className="font-semibold text-yellow-200">Guest Mode</h3>
								<p className="text-sm text-yellow-200/80">You can generate playlist previews with Mood.ai without signing in. Sign in to create playlists on Spotify.</p>
							</div>
							<Link 
								href="/api/auth/signin/spotify?callbackUrl=/generate"
								className="group relative inline-flex items-center justify-center rounded-full px-4 py-2 text-sm font-semibold text-black transition-transform active:scale-95"
							>
								<span className="absolute inset-0 -z-10 rounded-full bg-gradient-to-r from-fuchsia-500 via-purple-500 to-cyan-400 blur-md opacity-70 group-hover:opacity-90 transition-opacity" />
								<span className="rounded-full bg-white px-4 py-2">Sign In</span>
							</Link>
						</div>
					</div>
				)}

				{createdLink && (
					<div className="rounded-md border border-green-300/20 bg-green-400/10 p-3 text-sm text-green-200">
						<strong className="text-green-300">Success:</strong> Playlist created. {" "}
						<a href={createdLink} target="_blank" className="underline">Open on Spotify</a>
					</div>
				)}
				{error && (
					<div className="rounded-md border border-red-300/20 bg-red-400/10 p-3 text-sm text-red-200">{error}</div>
				)}

				<div className="grid grid-cols-1 gap-6 md:grid-cols-2">
					<form onSubmit={handleGenerate} className="space-y-6 rounded-xl border border-white/10 bg-white/5 p-5 backdrop-blur">
						{/* Mood Prompt Section */}
						<div>
							<label className="block text-sm font-medium mb-1 text-white">Mood prompt</label>
							<textarea
								className="w-full rounded border border-white/15 bg-transparent p-3 text-white placeholder-white/50"
								rows={4}
								value={prompt}
								onChange={(e) => setPrompt(e.target.value)}
								placeholder="e.g., late night drive under city lights, workout motivation, chill study vibes"
							/>
							<div className="text-xs text-white/50 mt-1">Describe your mood with vivid descriptors and emojis ✨</div>
						</div>

						{/* Language, Genre and Time Period Selection */}
						<div className="space-y-4">
							<h3 className="text-lg font-semibold text-white">Customize Your Playlist</h3>
							
							{/* Language Selection */}
							<div>
								<label className="block text-sm font-medium mb-2 text-white">Language/Region (Optional)</label>
								<select
									value={selectedLanguage}
									onChange={(e) => handleLanguageChange(e.target.value)}
									className="w-full rounded border border-white/15 bg-transparent p-3 text-white focus:border-fuchsia-400 focus:outline-none"
								>
									<option value="">Any language</option>
									{languages.map((lang) => (
										<option key={lang.value} value={lang.value} className="bg-gray-800 text-white">
											{lang.flag} {lang.label}
										</option>
									))}
								</select>
								<div className="text-xs text-white/50 mt-1">
									Choose a language/region to see relevant genres
								</div>
							</div>

							{/* Genre Selection */}
							<div>
								<label className="block text-sm font-medium mb-2 text-white">
									Genre (Optional)
									{selectedLanguage && (
										<span className="text-xs text-fuchsia-300 ml-2">
											- {languages.find(l => l.value === selectedLanguage)?.label} genres
										</span>
									)}
								</label>
								<select
									value={selectedGenre}
									onChange={(e) => setSelectedGenre(e.target.value)}
									className="w-full rounded border border-white/15 bg-transparent p-3 text-white focus:border-fuchsia-400 focus:outline-none"
									disabled={!selectedLanguage}
								>
									<option value="">
										{selectedLanguage ? `Any ${languages.find(l => l.value === selectedLanguage)?.label} genre` : "Select a language first"}
									</option>
									{getCurrentGenres().map((genre) => (
										<option key={genre} value={genre} className="bg-gray-800 text-white">
											{genre}
										</option>
									))}
								</select>
								{!selectedLanguage && (
									<div className="text-xs text-yellow-200 mt-1">
										💡 Select a language above to see relevant genres
									</div>
								)}
							</div>

							{/* Time Period Selection */}
							<div>
								<label className="block text-sm font-medium mb-2 text-white">Time Period (Optional)</label>
								
								{/* Time Period Type Tabs */}
								<div className="flex space-x-1 mb-3 bg-white/5 rounded-lg p-1">
									<button
										type="button"
										onClick={() => setTimePeriodType("decade")}
										className={`flex-1 py-2 px-3 text-sm rounded-md transition-colors ${
											timePeriodType === "decade" 
												? "bg-fuchsia-500 text-white" 
												: "text-white/70 hover:text-white"
										}`}
									>
										Decade
									</button>
									<button
										type="button"
										onClick={() => setTimePeriodType("specific-year")}
										className={`flex-1 py-2 px-3 text-sm rounded-md transition-colors ${
											timePeriodType === "specific-year" 
												? "bg-fuchsia-500 text-white" 
												: "text-white/70 hover:text-white"
										}`}
									>
										Year
									</button>
									<button
										type="button"
										onClick={() => setTimePeriodType("year-range")}
										className={`flex-1 py-2 px-3 text-sm rounded-md transition-colors ${
											timePeriodType === "year-range" 
												? "bg-fuchsia-500 text-white" 
												: "text-white/70 hover:text-white"
										}`}
									>
										Range
									</button>
								</div>

								{/* Time Period Inputs */}
								{timePeriodType === "decade" && (
									<select
										value={selectedTimePeriod}
										onChange={(e) => setSelectedTimePeriod(e.target.value)}
										className="w-full rounded border border-white/15 bg-transparent p-3 text-white focus:border-fuchsia-400 focus:outline-none"
									>
										<option value="">Any decade</option>
										{decades.map((decade) => (
											<option key={decade} value={decade} className="bg-gray-800 text-white">
												{decade}
											</option>
										))}
									</select>
								)}

								{timePeriodType === "specific-year" && (
									<select
										value={selectedTimePeriod}
										onChange={(e) => setSelectedTimePeriod(e.target.value)}
										className="w-full rounded border border-white/15 bg-transparent p-3 text-white focus:border-fuchsia-400 focus:outline-none"
									>
										<option value="">Any year</option>
										{recentYears.map((year) => (
											<option key={year} value={year} className="bg-gray-800 text-white">
												{year}
											</option>
										))}
									</select>
								)}

								{timePeriodType === "year-range" && (
									<div className="flex gap-3">
										<input
											type="number"
											placeholder="Start year"
											value={customYearRange.start}
											onChange={(e) => setCustomYearRange(prev => ({ ...prev, start: e.target.value }))}
											min="1950"
											max="2024"
											className="flex-1 rounded border border-white/15 bg-transparent p-3 text-white placeholder-white/50 focus:border-fuchsia-400 focus:outline-none"
										/>
										<span className="text-white/70 self-center">to</span>
										<input
											type="number"
											placeholder="End year"
											value={customYearRange.end}
											onChange={(e) => setCustomYearRange(prev => ({ ...prev, end: e.target.value }))}
											min="1950"
											max="2024"
											className="flex-1 rounded border border-white/15 bg-transparent p-3 text-white placeholder-white/50 focus:border-fuchsia-400 focus:outline-none"
										/>
									</div>
								)}
							</div>
						</div>

						{/* Basic Settings */}
						<div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
							<div>
								<label className="block text-sm font-medium mb-1 text-white">Playlist title</label>
								<input className="w-full rounded border border-white/15 bg-transparent p-2 text-white placeholder-white/50" value={title} onChange={(e) => setTitle(e.target.value)} />
							</div>
							<div>
								<label className="block text-sm font-medium mb-1 text-white">Number of songs: <span className="font-semibold">{numSongs}</span></label>
								<input
									type="range"
									min={5}
									max={50}
									step={5}
									className="w-full accent-fuchsia-400"
									value={numSongs}
									onChange={(e) => setNumSongs(parseInt(e.target.value || "0", 10))}
								/>
							</div>
							<div className="sm:col-span-2">
								<label className="block text-sm font-medium mb-1 text-white">Description</label>
								<input className="w-full rounded border border-white/15 bg-transparent p-2 text-white placeholder-white/50" value={description} onChange={(e) => setDescription(e.target.value)} placeholder="Generated by Mood.ai" />
							</div>
							{!isGuestMode && (
								<div className="flex items-center gap-2">
									<input id="public" type="checkbox" checked={isPublic} onChange={(e) => setIsPublic(e.target.checked)} />
									<label htmlFor="public" className="text-sm text-white">Public playlist</label>
								</div>
							)}
						</div>
						<div className="flex items-center gap-3">
							<button
								type="submit"
								disabled={loading}
								className="group relative inline-flex items-center justify-center rounded-full px-6 py-2 text-sm font-semibold text-black transition-transform active:scale-95 disabled:opacity-60"
							>
								<span className="absolute inset-0 -z-10 rounded-full bg-gradient-to-r from-fuchsia-500 via-purple-500 to-cyan-400 blur-md opacity-70 group-hover:opacity-90 transition-opacity" />
								<span className="rounded-full bg-white px-6 py-2">{loading ? "Mood.ai is working..." : "Generate with Mood.ai"}</span>
							</button>
							<Link href="/" className="text-sm text-white/80 underline hover:text-white">Cancel</Link>
						</div>
					</form>

					<div className="space-y-4">
						<div className="rounded-xl border border-white/10 bg-white/5 backdrop-blur">
							<div className="p-4 border-b border-white/10">
								<h2 className="font-semibold text-white">Preview</h2>
							</div>
							{!playlist ? (
								<div className="p-4 text-sm text-white/60">No playlist yet. Generate one to preview tracks.</div>
							) : (
								<>
									<div className="flex gap-4 p-4 items-center">
										<img src={playlist.imageUrl} alt="cover" className="w-24 h-24 rounded object-cover" />
										<div className="flex-1">
											<h3 className="text-lg font-medium text-white">{playlist.name}</h3>
											<p className="text-sm text-white/70">{playlist.description}</p>
											
											{/* Verification Stats */}
											{playlist.verificationStats && (
												<div className="mt-2 text-xs text-white/60">
													<div className="flex items-center gap-4">
														<span className="flex items-center gap-1">
															<span className="w-2 h-2 rounded-full bg-green-400"></span>
															{playlist.verificationStats.verifiedOnSpotify} verified on Spotify
														</span>
														{playlist.verificationStats.unverified > 0 && (
															<span className="flex items-center gap-1">
																<span className="w-2 h-2 rounded-full bg-yellow-400"></span>
																{playlist.verificationStats.unverified} unverified
															</span>
														)}
													</div>
												</div>
											)}
											
											{isGuestMode ? (
												<div className="text-sm text-yellow-200 mt-2">
													Sign in to create this Mood.ai playlist on Spotify
												</div>
											) : createdLink ? (
												<a href={createdLink} target="_blank" className="text-sm underline text-white mt-2 inline-block">Open on Spotify</a>
											) : (
												<button onClick={handleCreateOnSpotify} disabled={creating} className="group relative inline-flex items-center justify-center rounded-full px-4 py-2 text-sm font-semibold text-black transition-transform active:scale-95 disabled:opacity-60 mt-2">
													<span className="absolute inset-0 -z-10 rounded-full bg-gradient-to-r from-fuchsia-500 via-purple-500 to-cyan-400 blur-md opacity-70 group-hover:opacity-90 transition-opacity" />
													<span className="rounded-full bg-white px-4 py-2">{creating ? "Creating..." : "Create on Spotify"}</span>
												</button>
											)}
										</div>
									</div>
									<div className="border-t border-white/10 max-h-[420px] overflow-auto">
										<ul className="divide-y divide-white/10">
											{playlist.tracks.map((t, idx) => (
												<li key={t.id} className="p-3 text-sm flex items-center gap-3 text-white/90">
													<span className="w-6 text-white/50">{idx + 1}</span>
													<div className="flex-1">
														<div className="font-medium text-white flex items-center gap-2">
															{t.title}
															{t.spotifyId && (
																<span className="text-green-400 text-xs" title="Verified on Spotify">
																	✓
																</span>
															)}
														</div>
														<div className="text-white/60">{t.artist}</div>
													</div>
												</li>
											))}
										</ul>
									</div>
								</>
							)}
						</div>
					</div>
				</div>
			</div>
		</div>
	);
}
