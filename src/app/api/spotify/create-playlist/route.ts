import { NextResponse } from "next/server";
import { getServerAuth } from "@/auth";

async function fetchSpotify<T>(url: string, options: RequestInit, accessToken: string): Promise<T> {
	const res = await fetch(url, {
		...options,
		headers: {
			"Content-Type": "application/json",
			Authorization: `Bearer ${accessToken}`,
			...(options.headers || {}),
		},
	});
	if (!res.ok) {
		throw new Error(`${res.status} ${res.statusText}`);
	}
	return (await res.json()) as T;
}

export async function POST(req: Request) {
	const session = await getServerAuth();
	const accessToken = (session as any)?.tokens?.accessToken as string | undefined;
	if (!accessToken) {
		return NextResponse.json({ success: false, error: "UNAUTHORIZED" }, { status: 401 });
	}

	const body = await req.json().catch(() => ({} as any));
	const {
		title = "My AI Playlist",
		description = "Generated by AI Playlist Curator",
		isPublic = true,
		tracks = [],
	} = body || {};

	try {
		// 1) Get current user id
		const me = await fetchSpotify<{ id: string }>("https://api.spotify.com/v1/me", { method: "GET" }, accessToken);
		const userId = me.id;

		// 2) Search tracks to get IDs
		const uris: string[] = [];
		for (const t of tracks as Array<{ title: string; artist: string }>) {
			const q = new URLSearchParams({ q: `track:${t.title} artist:${t.artist}`, type: "track", limit: "1" }).toString();
			try {
				const search = await fetchSpotify<any>(`https://api.spotify.com/v1/search?${q}`, { method: "GET" }, accessToken);
				const id = search?.tracks?.items?.[0]?.id as string | undefined;
				if (id) uris.push(`spotify:track:${id}`);
			} catch {
				// skip
			}
		}

		// 3) Create playlist
		const created = await fetchSpotify<{ id: string; external_urls: { spotify?: string } }>(
			`https://api.spotify.com/v1/users/${userId}/playlists`,
			{ method: "POST", body: JSON.stringify({ name: title, description, public: Boolean(isPublic) }) },
			accessToken,
		);

		// 4) Add tracks (chunk by 100)
		for (let i = 0; i < uris.length; i += 100) {
			const chunk = uris.slice(i, i + 100);
			if (chunk.length === 0) continue;
			await fetchSpotify<any>(`https://api.spotify.com/v1/playlists/${created.id}/tracks`, { method: "POST", body: JSON.stringify({ uris: chunk }) }, accessToken);
		}

		return NextResponse.json({ success: true, id: created.id, externalUrl: created.external_urls?.spotify || null, added: uris.length });
	} catch (err: any) {
		return NextResponse.json({ success: false, error: err?.message || "SPOTIFY_ERROR" }, { status: 500 });
	}
}
